{"version":3,"sources":["components/ScrollList/ScrollList.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScrollList","props","classes","useStyles","ref","useRef","useState","items","setItems","moveFunc","throttle","num","newScrollPosition","window","pageXOffset","innerWidth","console","log","max","Math","floor","prev","useEffect","addEventListener","removeEventListener","style","width","length","className","wrapper","map","item","i","position","left","top","el","current","mockup","makeStyles","theme","createStyles","screen","height","boxSizing","background","border","display","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAIaA,EAAa,SAACC,GACzB,IAAMC,EAAUC,IACVC,EAAMC,iBAAO,IACnB,EAA0BC,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAtD,mBAAOC,EAAP,KAAcC,EAAd,KAGMC,EAAWC,YAAS,KAAK,SAACC,GAC9B,IAAIC,EAAoBC,OAAOC,YAAcD,OAAOE,WAClDC,QAAQC,IAAI,QAAkB,IAATV,EAAM,IAC3B,IAAMW,EAAMC,KAAKC,MAAMR,EAAoB,KAC3CJ,GAAS,SAACa,GAAD,MAAU,CAACH,EAAI,EAAGA,EAAI,EAAGA,EAAI,EAAGA,EAAI,EAAGA,EAAI,EAAGA,EAAI,EAAGA,SAUlE,OAPAI,qBAAU,WAET,OADCT,OAAOU,iBAAiB,SAAUd,GAC5B,WACLI,OAAOW,oBAAoB,SAAUf,MAErC,CAAEA,IAGH,qBAAKgB,MAAO,CAAEC,MAAM,GAAD,OAA6D,IAAtDP,KAAKC,MAAMb,EAAMA,EAAMoB,OAAS,GAAKpB,EAAMoB,QAAepB,EAAMoB,OAAvE,OACjBC,UAAW1B,EAAQ2B,QADrB,SAGGtB,EAAMuB,KAAI,SAACC,EAAMC,GAAP,OACT,sBACEP,MAAO,CAACQ,SAAU,WAAYC,KAAK,GAAD,OAAa,IAAPH,EAAN,MAAuBI,IAAK,KAE9D/B,IAAK,SAAAgC,GAAE,OAAKhC,EAAIiC,QAAQL,GAAKI,GAH/B,UAKE,4BAAIL,IACJ,qBAAKH,UAAW1B,EAAQoC,WAJnBP,SAWT5B,EAAYoC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,OAAO,CACLhB,MAAM,QACNiB,OAAO,SAETL,OAAQ,CACNM,UAAW,aACXlB,MAAO,QACPiB,OAAQ,QACRE,WAAY,YACZC,OAAQ,kBAEVf,KAAM,CACJgB,QAAS,WACTZ,IAAK,UC7CIa,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,EAAD,OCOSqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cfce2b20.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport {createStyles, makeStyles} from \"@material-ui/core\";\nimport { throttle } from 'throttle-debounce';\n\nexport const ScrollList = (props) => {\n  const classes = useStyles();\n  const ref = useRef([]);\n  const [items, setItems] = useState([0, 1, 2, 3, 4, 5, 6]);\n\n  // let prevScrollPosition = window.pageXOffset;\n  const moveFunc = throttle(100, (num) => {\n    let newScrollPosition = window.pageXOffset + window.innerWidth;\n      console.log('items', items[6]*300)\n      const max = Math.floor(newScrollPosition / 300)\n      setItems((prev) => [max-6, max-5, max-4, max-3, max-2, max-1, max]);\n  });\n\n  useEffect(() => {\n    window.addEventListener('scroll', moveFunc)\n   return () => {\n     window.removeEventListener('scroll', moveFunc)\n   }\n  }, [ moveFunc]);\n\n  return (\n    <div style={{ width: `${((Math.floor(items[items.length - 1] / items.length)) * 300*items.length)}px`}}\n      className={classes.wrapper}\n    >\n      {items.map((item, i) => (\n        <div\n          style={{position: \"absolute\", left: `${(item * 300)}px`, top: \"0\"}}\n          key={item}\n          ref={el => (ref.current[i] = el)}\n        >\n          <p>{item}</p>\n          <div className={classes.mockup}/>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    screen:{\n      width:'100vw',\n      height:'100vh',\n    },\n    mockup: {\n      boxSizing: 'border-box',\n      width: '300px',\n      height: '150px',\n      background: 'lightblue',\n      border: '2px solid teal',\n    },\n    item: {\n      display: \"absolute\",\n      top: \"0\",\n    },\n  }),\n);\n\n\n","import React from 'react';\nimport './App.css';\nimport { ScrollList } from \"./components/ScrollList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ScrollList />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}